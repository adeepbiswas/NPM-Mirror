version: '3'
services:
  couchserver:
    image: couchdb
    hostname: couchserver
    restart: always
    ports: 
      - "5984:5984"
    environment:
      - COUCHDB_USER=${DB_USER} 
      - COUCHDB_PASSWORD=${DB_PASSWORD} 
    volumes:
      - ./dbdata:/opt/couchdb/data
    networks:
      - npm-network
    logging:
      driver: none #to suppress log messages while doing docker compose up

  zookeeper-npm:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper-npm
    container_name: zookeeper-npm
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - npm-network

  broker-npm:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker-npm
    ports:
      - 9092:9092
    depends_on:
      - zookeeper-npm
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-npm:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_INTERNAL://broker-npm:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 10485760 # 10MB
      KAFKA_LOG_RETENTION_HOURS: 120
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    networks:
      - npm-network
    logging:
      driver: none #to suppress log messages while doing docker compose up

  kafka-exporter-npm:
    image: docker.io/alesj/kafka_exporter:fork2
    container_name: kafka-exporter-npm
    ports:
      - 9308:9308  
    depends_on:
      - broker-npm
    environment:
      KAFKA_BROKER: "broker-npm:9092" 
    networks:
      - npm-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - broker-npm
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: npm-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-npm:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 11001
      KAFKA_CLUSTERS_0_METRICS_TYPE: PROMETHEUS
    networks:
      - npm-network
    logging:
      driver: none #to suppress log messages while doing docker compose up

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - npm-network

  grafana:
    hostname: grafana
    image: grafana/grafana
    ports:
      - 3001:3000
    networks:
      - npm-network

  npm-mirror:
    image: npm-mirror
    hostname: npm-mirror
    depends_on:
      - zookeeper-npm
      - broker-npm
      - couchserver
    networks:
      - npm-network
    volumes:
      # - ../../../../../../NPM/packages:/npm-mirror/packages
      - ../packages:/npm-mirror/packages
      - ./update_seq:/npm-mirror/update_seq

networks:
  npm-network:
    driver: bridge